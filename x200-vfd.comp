component x200_vfd "Hitachi x200 modbus driver (andrewsuzuki)";
param rw unsigned mbslaveaddr     "Modbus slave address";
pin in float commanded_frequency  "Frequency of vfd";
pin in bit reverse                "1 when reverse 0 when forward";
pin in bit run                    "run the vfd";
pin in bit enable                 "1 to enable the vfd. 0 will remote trip the vfd, thereby disabling it.";
pin out bit is_running            "1 when running";
pin out bit is_at_speed           "1 when running at assigned frequency";
pin out bit is_ready              "1 when vfd is ready to run";
pin out bit is_alarm              "1 when vfd alarm is set";
pin out bit watchdog_out          "Alternates between 1 and 0 after every update cycle. Feed into a watchdog component to ensure vfd driver is communicating with the vfd properly.";
option userspace;
option userinit yes;
license "GPLv2 or greater";
;;
/*
  Userspace HAL component to control a Hitatchi X200 series VFD

  Written by Andrew Suzuki, inspired by vfs11_vfd.c in linuxcnc

  Copyright (C) 2019 Andrew Suzuki
  Copyright (C) 2012 Curtis Dutton, OK Computers LLC

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation, version 2.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.

  see 'man ./x200_vfd' (after running halcompile --document x200-vfd.comp)
*/
#include<stdio.h>
#include<errno.h>
#include<getopt.h>
#include<stdbool.h>
#include<math.h>
#include<modbus.h>
#include<unistd.h>
#include<ctype.h>

typedef struct {
    uint8_t running;
    uint8_t ready;
    uint8_t direction; // 1 = reverse, 0 = forward
    uint8_t at_speed;
    uint8_t alarm;
    uint16_t frequency;
} x200_status;

// Set run coil (coil 0x0001) (TRUE or FALSE)
bool x200_run(modbus_t* ctx, bool on) {
    return modbus_write_bit(ctx, 0x0001 - 1, on) > 0;
}

// Change direction (coil 0x0002) (1=forward, 0=reverse)
// Note that this bit is the inverse of WJ200,
// and also the inverse of the read direction status (0x000F)
bool x200_setDirection(modbus_t* ctx, bool isForward) {
    return modbus_write_bit(ctx, 0x0002 - 1, isForward) > 0;
}

// Trigger EXT external trip (coil 0x0003)
bool x200_trip(modbus_t* ctx) {
    return modbus_write_bit(ctx, 0x0003 - 1, TRUE) > 0;
}

// Reset the trip status of the VFD (coil 0x0004)
bool x200_reset(modbus_t* ctx) {
    int rc = modbus_write_bit(ctx, 0x0004 - 1, TRUE);

    // After the reset, sleep for 1 second.
    // The x200 vfd seems to need some time
    // before it will reply to more modbus commands
    sleep(1);

    return rc > 0;
}

// Set the operating frequency of the VFD (coil 0x0002)
bool x200_setFrequency(modbus_t* ctx, uint16_t frequency) {
    return modbus_write_registers(ctx, 0x0002 - 1, 1, &frequency) > 0;
}

// Read all relevant coils and registers from X200 and
// update struct with values.
bool x200_getStatus(modbus_t* ctx, x200_status* status) {
    int rc;
    // For reference, relevant bits initialized to FALSE and unused to 0:
    uint8_t bits[11] = {FALSE, FALSE, FALSE, 0, 0, 0, FALSE, 0, 0, 0, FALSE};
    uint16_t outputFrequencyRegister[1];

    // Confusingly, in modbus, coils numbers are offset +1
    // from their address. Therefore, to read coil 0x000E,
    // we'll read from address 0x000E-1 = 0x000D

    // Read coil numbers 0x000E through 0x0018
    rc = modbus_read_bits(ctx, 0x000E - 1, 11, bits);
    if (rc < 0) {
        fprintf(
            stderr,
            "Readbits fail: RUN%0d DIR%0d READY%0d ALARM%0d AT_SPEED%0d\n",
            bits[0],bits[1],bits[2],bits[6],bits[10]
        );
        return false;
    }

    // Read register 0x0002 (output frequency)
    // (output range is 0 to 4000, resolution 0.1Hz,
    // therefore real freq is from 0.0 to 400.0Hz)
    rc = modbus_read_registers(ctx, 0x0002 - 1, 1, outputFrequencyRegister);
    if (rc < 0) {
        fprintf(stderr, "Readreg fail\n");
        return false;
    }

    // TODO output current, heatsink temp

    // Update status struct with retrieved values

    status->running = bits[0]; // 0x000E => => 1=running, 0=stop
    status->direction = bits[1]; // 0x000F => 1=reverse, 0=forward
    status->ready = bits[2]; // 0x0010 => 1=ready, 0=not
    // 0x0011 to 0x0013 are reserved
    status->alarm = bits[6]; // 0x0014 => 1=trip, 0=normal
    status->at_speed = bits[10]; // 0x0018 => 1=on, 0=off

    status->frequency = outputFrequencyRegister[1]; // 0x0002 => 0 to 4000 (unscaled!)

    return true;
}

void print_modbus_error(struct __comp_state *__comp_inst, const char* msg) {
    fprintf(
        stderr,
        "Error: x200-vfd slave(%d): %s - Modbus error (%d) -  %s\n",
        mbslaveaddr,
        msg,
        errno,
        modbus_strerror(errno)
    );
}


// Modbus connection settings
char *device = "/dev/ttyS0";
int baud = 9600;
char parity = 'N';
int data_bits = 8;
int stop_bits = 1;
modbus_t *ctx;

void userinit(int argc, char **argv) {
    // Parse arguments

    int opt_index = 0;
    int c = 0;

    static struct option options[] = {
        {"baud",   required_argument, 0, 0 },
        {"parity", required_argument, 0, 0 },
        {"databits", required_argument, 0, 0 },
        {"stopbits", required_argument, 0, 0 },
        {0, 0, 0, 0}
    };

    while (1) {
        c = getopt_long(argc, argv, "", options, &opt_index);

        if (c == -1) {
            break;
        }

        switch (opt_index) {
            case 0:
                baud = atoi(optarg);
                if (baud == 0) {
                    fprintf(
                        stderr,
                        "Invalid argument: baud must be a number. Given '%s'\n", // [AD] baud was misspelled as "buad"
                        optarg
                    );
                    exit(1);
                }
                break;
            case 1:
                parity = toupper(optarg[0]);
                if (parity != 'Y' && parity != 'N') {
                    fprintf(
                        stderr,
                        "Invalid argument: parity must be 'y' or 'n'. Given '%s'\n",
                        optarg
                    );
                    exit(1);
                }
                break;
            case 2:
                data_bits = atoi(optarg);
                if (data_bits == 0) {
                    fprintf(
                        stderr,
                        "Invalid argument: databits must be a number. Given '%s'\n",
                        optarg
                    );
                    exit(1);
                }
                break;
            case 3:
                stop_bits = atoi(optarg);
                if (stop_bits == 0) {
                    fprintf(
                        stderr,
                        "Invalid argument: stopbits must be a number. Given '%s'\n",
                        optarg
                    );
                    exit(1);
                }
                break;
            default:
                exit(1);
        }
    }

    // Initialize modbus_t struct (ctx)
    ctx = modbus_new_rtu(device, baud, parity, data_bits, stop_bits);
    if (ctx == NULL) {
        fprintf(
            stderr,
            "ERROR: x200-vfd unable to create libmodbus context. - %s\n",
            modbus_strerror(errno)
        );
        fprintf(stderr, "Check your commandline!\n");
        exit(1);
    }

    // Establish a connection
    if (modbus_connect(ctx) == -1) {
        fprintf(
            stderr,
            "ERROR: x200-vfd unable to create libmodbus connection. - %s\n",
            modbus_strerror(errno)
        );
        exit(1);
    }
}

void user_mainloop(void) {
    x200_status status;
    uint16_t calculated_frequency;

    while (1) {
        FOR_ALL_INSTS() {
            // Until the params are set we just wait a bit
            // and then skip to the next instance.
            // If every instance does not get a slave address,
            // this could cause bad behavior.
            if (mbslaveaddr == 0) {
                sleep(1);
                continue;
            }

            modbus_set_slave(ctx, mbslaveaddr);

            // For each slave, receive info from the slave,
            // update our output pins based upon vfd status,
            // then set the vfd according to our input pins.

            // If we hit an error we just re-loop. The watchdog
            // pin won't change until we make it all the way through
            // the loop.

            if (!x200_getStatus(ctx, &status)) {
                print_modbus_error(__comp_inst, "failed to get status");
                continue;
            }

            // Update HAL out pins with read-only values from status struct
            is_running = status.running;
            is_at_speed = status.at_speed;
            is_ready = status.ready;
            is_alarm = status.alarm;

            // Trigger external trip if in pin enable is FALSE (and !alarm = not already tripped).
            if (!status.alarm && !enable && !x200_trip(ctx)) {
                print_modbus_error(__comp_inst, "failed to trip");
                continue;
            // If alarm is on and in pin enable is TRUE, trigger reset
            } else if (status.alarm && enable && !x200_reset(ctx)) {
                print_modbus_error(__comp_inst, "failed to reset");
                continue;
            } else {
                // Check if commanded_frequency is different from current reported frequency.
                // If it is different, set the new frequency.
                // The X200 has 0.1Hz resolution and reports frequency as an integer,
                // therefore multiply commanded frequency (a float) by 10 for comparison with
                // reported freq (and for setting).
                calculated_frequency = (uint16_t)(fabs(commanded_frequency) * 10);
                if (calculated_frequency != status.frequency && !x200_setFrequency(ctx, calculated_frequency)) {
                    print_modbus_error(__comp_inst, "failed to set frequency");
                    continue;
                }

                // Check if in pin forward is different from current reported direction.
                // If it is different, set the new direction.
                // This is confusing because the direction status (0x000F) is
                // OPPOSITE from the direction command (0x0002).
                // For direction status, 1=reverse, 0=forward
                // For direction command, 1=forward, 0=reverse
                if (reverse != status.direction && !x200_setDirection(ctx, !reverse)) {
                    print_modbus_error(__comp_inst, "failed to set direction");
                    continue;
                }

                // Check if in pin run is different from current reported run.
                // If it is different, set the new run.
                if (status.running != run && !x200_run(ctx, run)) {
                    print_modbus_error(__comp_inst, "failed to run");
                    continue;
                }

                // Flip watchdog ("heartbeat")
                watchdog_out = !watchdog_out;
            }
        }
    }
}

/* vim: set filetype=c expandtab ts=4 sw=4 ai : */
